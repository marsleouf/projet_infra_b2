function MySpotify() {
  let uri = document.location.href.split("?");
  let redirect_uri = uri[0];
  var scopes =
    "app-remote-control streaming user-read-email user-read-private playlist-read-private user-read-currently-playing user-read-playback-state user-modify-playback-state";
  var my_client_id = "d24f069b916c446abaec3a596fdd70e8";
  if (!document.location.search) {
    document.location.href =
      "https://accounts.spotify.com/authorize" +
      "?response_type=code" +
      "&client_id=" +
      my_client_id +
      (scopes ? "&scope=" + encodeURIComponent(scopes) : "") +
      "&redirect_uri=" +
      encodeURIComponent(redirect_uri);
  }
  var page = document.location.search.split("?");
  var nbPage = page[1].split("=");
  this.ObjectJson;
  var resJson;

  let token;
  this.getToken = () => {
    return token;
  };
  this.Authorization = () => {
    var xhttp = new XMLHttpRequest();
    xhttp.open("POST", "https://accounts.spotify.com/api/token", true);
    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhttp.setRequestHeader(
      "Authorization",
      `Basic ${btoa(
        "d24f069b916c446abaec3a596fdd70e8:4e53bf84530a423cbb22955f00472518"
      )}`
    );
    xhttp.send(
      `grant_type=authorization_code&code=${
        nbPage[1]
      }&redirect_uri=${encodeURIComponent(redirect_uri)}`
    );
    xhttp.onload = function () {
      const resulHtml = xhttp.responseText;
      resJson = JSON.parse(resulHtml);
      if (resJson.error != undefined) {
        document.location.href = redirect_uri;
      }
      token = resJson.access_token;
      //console.log(token);
      return resJson.access_token;
    };
  };
  this.request = (type, url, value = "") => {
    return new Promise((resolve) => {
      var xhttp = new XMLHttpRequest();
      xhttp.open(type, url, true);
      xhttp.setRequestHeader("Content-type", "application/json");
      xhttp.setRequestHeader("Accept", "application/json");
      xhttp.setRequestHeader("Authorization", `Bearer ${token}`);
      xhttp.send(value);
      xhttp.onload = () => {
        if (xhttp.responseText != "") {
          this.resJson1 = JSON.parse(xhttp.responseText);
          resolve(this.resJson1);
        }
      };
    });
  };
  this.getDevice = async () => {
    var res = await this.request(
      "GET",
      "https://api.spotify.com/v1/me/player/devices"
    );
    //console.log(res);
    this.ShowDevice(res.devices, "device");
  };

  this.playToDevice = async (id_device) => {
    await this.request(
      "PUT",
      "https://api.spotify.com/v1/me/player",
      '{"device_ids":["' + id_device + '"]}'
    );
  };
  this.nextDevice = async () => {
    this.resJson1;
    device_id = await this.playerDevice();
    await this.request(
      "POST",
      `https://api.spotify.com/v1/me/player/next?device_id=${device_id}`
    );
  };
  this.prevDevice = async () => {
    device_id = await this.playerDevice();
    await this.request(
      "POST",
      `https://api.spotify.com/v1/me/player/previous?device_id=${device_id}`
    );
  };
  this.playDevice = async () => {
    device_id = await this.playerDevice();
    let value = await this.request(
      "PUT",
      `https://api.spotify.com/v1/me/player/play?device_id=${device_id}`
    );
  };
  this.volumeDevice = async (volume) => {
    device_id = await this.playerDevice();
    let value = await this.request(
      "PUT",
      `https://api.spotify.com/v1/me/player/volume?device_id=${device_id}&volume_percent=${volume}`
    );
  };
  this.pauseDevice = async () => {
    device_id = await this.playerDevice();
    await this.request(
      "PUT",
      `https://api.spotify.com/v1/me/player/pause?device_id=${device_id}`
    );
  };
  this.playerDevice = async () => {
    return new Promise((resolve) => {
      var resJson1 = this.request(
        "GET",
        "https://api.spotify.com/v1/me/player?market=FR"
      );
      resJson1.then((value) => {
        this.img_alb();
        this.ObjectJson = value;
        device_id = value.device.id;
        resolve(device_id);
      });
    });
  };

  this.img_alb = () => {
    let img = document.getElementById("img_album");
    let name = document.getElementById("name_play");
    let name_artis = document.getElementById("artis_play");
    let volume_playing = document.getElementById("Volume");
    let Volume_label = document.getElementById("Volume_label");
    let Time = document.getElementById("Time");
    let Time_label = document.getElementById("Time_label");
    let stringNameArtis = "";
    name_artis.innerText = "";
    name.innerText = "";
    Time.value = "";
    console.log(this.resJson1);
    let val_img = this.resJson1.item.album.images;
    name.innerText = this.resJson1.item.name;
    for (let i = 0; i < this.resJson1.item.artists.length; i++) {
      let element = this.resJson1.item.artists[i];
      if (i > 0) {
        stringNameArtis += `, ${element.name}`;
      } else {
        stringNameArtis += `${element.name}`;
      }
    }
    name_artis.innerText = stringNameArtis;
    img.src = val_img[0].url;
    Time.max = this.resJson1.item.duration_ms;
    Time.value = this.resJson1.progress_ms;
    volume_playing.value = this.resJson1.device.volume_percent;
    Volume_label.innerText = `Volume: ${this.resJson1.device.volume_percent}`;
    Time_label.innerText = `Time: ${this.millisToMinutesAndSeconds(
      this.resJson1.progress_ms
    )}-${this.millisToMinutesAndSeconds(
      this.resJson1.item.duration_ms - this.resJson1.progress_ms
    )}`;
  };
  this.ShowDevice = (data, id) => {
    let de = document.getElementById(id);
    de.innerHTML = "";
    for (let i = 0; i < data.length; i++) {
      let element = data[i];
      let a = document.createElement("a");
      a.href = `javascript:spotify.playToDevice('${element.id}');`;
      a.className = "btn btn-outline-success";
      a.innerText = element.name;
      de.appendChild(a);
    }
  };
  this.millisToMinutesAndSeconds = (millis) => {
    var minutes = Math.floor(millis / 60000);
    var seconds = ((millis % 60000) / 1000).toFixed(0);
    return minutes + ":" + (seconds < 10 ? "0" : "") + seconds;
  };
}
